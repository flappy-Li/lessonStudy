(function () {
    function jQuery (selector) {
        return new jQuery.prototype.init(selector);
    }
    
    jQuery.prototype.init = function (selector) {
        var dom;
        this.length = 0;

        if (selector == null) return this;
        
        if ( typeof selector == 'string' && selector.indexOf('.') !== -1 ) {
            dom = document.getElementsByClassName( selector.slice(1) );
        } else if ( typeof selector == 'string' && selector.indexOf('#') !== -1 ) {
            dom = document.getElementById( selector.slice(1) );
        }

        // selector eq选择的 dom 
        if (selector instanceof Element || dom.length == undefined) {
            debugger;
            this[0] = dom || selector;
            this.length ++;
        }else {
            for (var i = 0; i < dom.length; i ++) {
                this[i] = dom[i];
                this.length ++
            };
        }
    }
    
    jQuery.prototype.css = function ( styleConfig ) {
        for (var i = 0; i < this.length; i ++) {
            for (var attr in styleConfig ) {
                this[i].style[attr] = styleConfig[attr];
            }
        }
        return this;
    }
    jQuery.prototype.get = function(num) {
        return num != null ? ( num >= 0 ? this[num] : this[this.length + num] ) : [].splice.call( this, 0);
    }
    jQuery.prototype.eq = function (num) {
        var dom = num != null ? (num >= 0 ? this[num] : this[this.length + num]) : null;
        return this.pushStack(dom);
    }
    jQuery.prototype.add = function (selector) {
        var curObj = jQuery(selector),
            newObj = jQuery();
        this.merge(newObj, curObj);
        this.merge(newObj, this);
        this.pushStack(newObj);
        return newObj;
       
    }
    jQuery.prototype.end = function (dom) {
        return dom.prototype = this;
    }
    

    //jQuery 工具方法 
    jQuery.prototype.merge = function (newObj, curObj) {
        for (let i = 0; i < curObj.length; i++) {
            newObj[newObj.length++] = curObj[i]
        }
        return newObj;
    }
    jQuery.prototype.pushStack = function (dom) {
        if (dom == null || dom.constructor !== jQuery) {
            dom = jQuery(dom);
        }
        dom.prevObject = this;
        return dom;
    }
    jQuery.prototype.init.prototype = jQuery.prototype;
    window.$ = window.jQuery = jQuery;
}())